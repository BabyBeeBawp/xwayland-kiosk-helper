#!/bin/bash
set -e

# Ensure XWAYLAND_FULLSCREEN_WINDOW_HINT is set
if [ -z ${XWAYLAND_FULLSCREEN_WINDOW_HINT+x} ]; then
  echo "The XWAYLAND_FULLSCREEN_WINDOW_HINT was not specified in the snapcraft.yaml file"
  exit 1
fi

# Xwayland needs to run as root (bug lp:1767372), so everything has to
if [ "$EUID" -ne 0 ]; then
  echo "This needs to run as root"
  exit 2
fi

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1738197 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p $XDG_RUNTIME_DIR -m 700

# Wayland socket management
wdisplay="wayland-0"
if [ -n "$WAYLAND_DISPLAY" ]; then
  wdisplay="$WAYLAND_DISPLAY"
fi
wayland_sockpath="$XDG_RUNTIME_DIR/../$wdisplay"
wayland_snappath="$XDG_RUNTIME_DIR/$wdisplay"

# Verify accessible Wayland socket - opening it only way to be sure
attempted_open=$(cat "$wayland_sockpath" 2>&1)

if [ -S "$wayland_sockpath" ] && ! [[ $attempted_open = *"Permission denied"* ]]; then
  # if running under wayland, use it
  #export WAYLAND_DEBUG=1
  # create the compat symlink for now
  if [ ! -e "$wayland_snappath" ]; then
    ln -s "$wayland_sockpath" "$wayland_snappath"
  fi
else
  echo "Error: Unable to open a valid Wayland socket!"
  echo ""
  echo "##################################################################################"
  echo "You may need to connect this snap to one which implements the 'wayland' plug."
  echo ""
  echo "You can do this with these commands:"
  echo "  snap install mir-kiosk"
  echo "  snap connect $SNAP_NAME:wayland mir-kiosk:wayland"
  echo "##################################################################################"
  exit 1;
fi

# This snap provides both an X11 server and an X11 client which needs to connect to it. To allow
# this to work correctly, need to be both an X11 slot and X11 plug, and have them connected.
# Detect the X11 plug/slot connected by verifying access to fontconfig directory.
attempted_open=$(ls "/var/cache/fontconfig/" 2>&1)

if [[ $attempted_open = *"Permission denied"* ]]; then
  echo "##################################################################################"
  echo "If you are experiencing problems with your GUI app (e.g. bad fonts), please run:"
  echo "  snap connect $SNAP_NAME:x11-plug $SNAP_NAME:x11"
  echo "##################################################################################"
fi

# If necessary, set up minimal environment for Xwayland to function
if [ -z ${LIBGL_DRIVERS_PATH+x} ]; then
  if [ "$SNAP_ARCH" == "amd64" ]; then
    ARCH="x86_64-linux-gnu"
  elif [ "$SNAP_ARCH" == "armhf" ]; then
    ARCH="arm-linux-gnueabihf"
  elif [ "$SNAP_ARCH" == "arm64" ]; then
    ARCH="aarch64-linux-gnu"
  else
    ARCH="$SNAP_ARCH-linux-gnu"
  fi

  export LIBGL_DRIVERS_PATH=$SNAP/usr/lib/$ARCH/dri
fi

# Use new port number in case old server clean up wasn't successful
let port=$RANDOM%100
# Avoid low numbers as they may be used by desktop
let port+=4

# We need a simple window manager to make the client application fullscreen.
# Am using i3 here, so generate a simple config file for it.
I3_CONFIG=$SNAP_DATA/i3.config

cat <<EOF > "$I3_CONFIG"
# i3 config file (v4)
font pango:monospace 8
# set window for fullscreen
for_window [${XWAYLAND_FULLSCREEN_WINDOW_HINT}] fullscreen
EOF

# Launch Xwayland.
SNAPPY_PRELOAD=$SNAP \
LD_PRELOAD=$SNAP/lib/libxwayland-preload.so \
  $SNAP/usr/bin/Xwayland -terminate :${port} & pid=$!

trap "trap - SIGTERM && kill $pid" SIGINT SIGTERM EXIT # kill on signal or quit
sleep 1 # FIXME - Xwayland does emit SIGUSR1 when ready for client connections

export DISPLAY=:${port}

$SNAP/usr/bin/i3 -c "$I3_CONFIG" &

# Launch the X11 process passed in
exec "$@"
